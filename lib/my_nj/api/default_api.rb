=begin
#myNJ authorization API

#__This document is confidential and proprietary to the State of New Jersey. Do not redistribute it outside your team, and do not post it in any repository or allow it to be incorporated into any artificial intelligence tool, LLM or other database.__  This API is used to manage authorizations for myNJ users to access an agency's application.  It should be called from a user management module in the application, to enable a privileged user to grant and revoke access for other users.  The API allows the privileged user to avoid using the myNJ Role Manager facility for granting and revoking.  The calling application __must__ restrict access to its user management module so that only properly privileged users can use it to cause API calls to be made to myNJ.  The privileged user must have a myNJ account with the role being managed, along with a valid user key (unique identifier) for that role.  The API is not designed or intended for batch operation. 

OpenAPI spec version: 1.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module MyNJ
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Request that myNJ create an authorization to grant a role and associated user key (unique identifier) to a person. If the response object's Success property is true, myNJ will have sent an email invitation to the specified address, containing instructions and a one-time authorization code or \"PIN\". In that case, the caller must store the response AuthID for later revocation or updates. 
    # @param body 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param [Hash] opts the optional parameters
    # @return [MynjAuth]
    def grant_post(body, my_nj_admin_user_key, opts = {})
      data, _status_code, _headers = grant_post_with_http_info(body, my_nj_admin_user_key, opts)
      data
    end

    # Request that myNJ create an authorization to grant a role and associated user key (unique identifier) to a person. If the response object&#x27;s Success property is true, myNJ will have sent an email invitation to the specified address, containing instructions and a one-time authorization code or \&quot;PIN\&quot;. In that case, the caller must store the response AuthID for later revocation or updates. 
    # @param body 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MynjAuth, Integer, Hash)>] MynjAuth data, response status code and response headers
    def grant_post_with_http_info(body, my_nj_admin_user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.grant_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.grant_post"
      end
      # verify the required parameter 'my_nj_admin_user_key' is set
      if @api_client.config.client_side_validation && my_nj_admin_user_key.nil?
        fail ArgumentError, "Missing the required parameter 'my_nj_admin_user_key' when calling DefaultApi.grant_post"
      end
      # resource path
      local_var_path = '/grant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'MyNJ-AdminUserKey'] = my_nj_admin_user_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'MynjAuth' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#grant_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revoke an existing authorization.  This method must be called when the user identified in the authorization should no longer have access to your application.  Unaccepted invitations can also be revoked. 
    # @param body 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param [Hash] opts the optional parameters
    # @return [MynjAuth]
    def revoke_post(body, my_nj_admin_user_key, opts = {})
      data, _status_code, _headers = revoke_post_with_http_info(body, my_nj_admin_user_key, opts)
      data
    end

    # Revoke an existing authorization.  This method must be called when the user identified in the authorization should no longer have access to your application.  Unaccepted invitations can also be revoked. 
    # @param body 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MynjAuth, Integer, Hash)>] MynjAuth data, response status code and response headers
    def revoke_post_with_http_info(body, my_nj_admin_user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.revoke_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.revoke_post"
      end
      # verify the required parameter 'my_nj_admin_user_key' is set
      if @api_client.config.client_side_validation && my_nj_admin_user_key.nil?
        fail ArgumentError, "Missing the required parameter 'my_nj_admin_user_key' when calling DefaultApi.revoke_post"
      end
      # resource path
      local_var_path = '/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'MyNJ-AdminUserKey'] = my_nj_admin_user_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'MynjAuth' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#revoke_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status and other attributes of an existing authorization. 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param auth_id ID of an authorization record returned by a prior call to grant. 
    # @param [Hash] opts the optional parameters
    # @return [MynjAuthStatus]
    def status_auth_id_get(my_nj_admin_user_key, auth_id, opts = {})
      data, _status_code, _headers = status_auth_id_get_with_http_info(my_nj_admin_user_key, auth_id, opts)
      data
    end

    # Get the status and other attributes of an existing authorization. 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param auth_id ID of an authorization record returned by a prior call to grant. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MynjAuthStatus, Integer, Hash)>] MynjAuthStatus data, response status code and response headers
    def status_auth_id_get_with_http_info(my_nj_admin_user_key, auth_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.status_auth_id_get ...'
      end
      # verify the required parameter 'my_nj_admin_user_key' is set
      if @api_client.config.client_side_validation && my_nj_admin_user_key.nil?
        fail ArgumentError, "Missing the required parameter 'my_nj_admin_user_key' when calling DefaultApi.status_auth_id_get"
      end
      # verify the required parameter 'auth_id' is set
      if @api_client.config.client_side_validation && auth_id.nil?
        fail ArgumentError, "Missing the required parameter 'auth_id' when calling DefaultApi.status_auth_id_get"
      end
      # resource path
      local_var_path = '/status/{authID}'.sub('{' + 'authID' + '}', auth_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'MyNJ-AdminUserKey'] = my_nj_admin_user_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MynjAuthStatus' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#status_auth_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing authorization.  Any fields omitted from the request will not be changed.  The AuthID may not be omitted and cannot be changed.  Some other fields may not be able to be changed, depending on the status of the authorization.  The user key, email and names fields can be changed if the invitation has not been accepted.  Only the user key (unique identifier) can be changed if the invitation has been accepted.  The user key is the basis of single-signon, so its value must match in the user's record in the application database and in the user's myNJ account.  No fields can be changed if the invitation has been revoked.  It's not necessary or possible to update fields other than the user key in an accepted authorization, even if the user's name or email address have subsequently changed.  At that point the authorization fields only serve as an audit record of where the invitation was sent and don't need to match the user's current name or address. 
    # @param body 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param [Hash] opts the optional parameters
    # @return [MynjAuth]
    def update_post(body, my_nj_admin_user_key, opts = {})
      data, _status_code, _headers = update_post_with_http_info(body, my_nj_admin_user_key, opts)
      data
    end

    # Update an existing authorization.  Any fields omitted from the request will not be changed.  The AuthID may not be omitted and cannot be changed.  Some other fields may not be able to be changed, depending on the status of the authorization.  The user key, email and names fields can be changed if the invitation has not been accepted.  Only the user key (unique identifier) can be changed if the invitation has been accepted.  The user key is the basis of single-signon, so its value must match in the user&#x27;s record in the application database and in the user&#x27;s myNJ account.  No fields can be changed if the invitation has been revoked.  It&#x27;s not necessary or possible to update fields other than the user key in an accepted authorization, even if the user&#x27;s name or email address have subsequently changed.  At that point the authorization fields only serve as an audit record of where the invitation was sent and don&#x27;t need to match the user&#x27;s current name or address. 
    # @param body 
    # @param my_nj_admin_user_key UserKey (unique identifier) in the agency app&#x27;s datastore for the administrator (the person whose actions in the app&#x27;s user administration module triggered this call to the myNJ API). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MynjAuth, Integer, Hash)>] MynjAuth data, response status code and response headers
    def update_post_with_http_info(body, my_nj_admin_user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.update_post"
      end
      # verify the required parameter 'my_nj_admin_user_key' is set
      if @api_client.config.client_side_validation && my_nj_admin_user_key.nil?
        fail ArgumentError, "Missing the required parameter 'my_nj_admin_user_key' when calling DefaultApi.update_post"
      end
      # resource path
      local_var_path = '/update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'MyNJ-AdminUserKey'] = my_nj_admin_user_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'MynjAuth'

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
